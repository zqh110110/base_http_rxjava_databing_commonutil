package com.smcb.simulatedstock.data.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.smcb.simulatedstock.data.entity.MarkEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "MARK_ENTITY".
*/
public class MarkEntityDao extends AbstractDao<MarkEntity, Long> {

    public static final String TABLENAME = "MARK_ENTITY";

    /**
     * Properties of entity MarkEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CODE = new Property(1, String.class, "CODE", false, "CODE");
        public final static Property NAME = new Property(2, String.class, "NAME", false, "NAME");
        public final static Property PYTAG = new Property(3, String.class, "PYTAG", false, "PYTAG");
        public final static Property PYALL = new Property(4, String.class, "PYALL", false, "PYALL");
        public final static Property Ext1 = new Property(5, String.class, "ext1", false, "EXT1");
        public final static Property Ext2 = new Property(6, String.class, "ext2", false, "EXT2");
        public final static Property STID = new Property(7, String.class, "STID", false, "STID");
    }


    public MarkEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MarkEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MARK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODE\" TEXT," + // 1: CODE
                "\"NAME\" TEXT," + // 2: NAME
                "\"PYTAG\" TEXT," + // 3: PYTAG
                "\"PYALL\" TEXT," + // 4: PYALL
                "\"EXT1\" TEXT," + // 5: ext1
                "\"EXT2\" TEXT," + // 6: ext2
                "\"STID\" TEXT);"); // 7: STID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MARK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MarkEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(2, CODE);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(3, NAME);
        }
 
        String PYTAG = entity.getPYTAG();
        if (PYTAG != null) {
            stmt.bindString(4, PYTAG);
        }
 
        String PYALL = entity.getPYALL();
        if (PYALL != null) {
            stmt.bindString(5, PYALL);
        }
 
        String ext1 = entity.getExt1();
        if (ext1 != null) {
            stmt.bindString(6, ext1);
        }
 
        String ext2 = entity.getExt2();
        if (ext2 != null) {
            stmt.bindString(7, ext2);
        }
 
        String STID = entity.getSTID();
        if (STID != null) {
            stmt.bindString(8, STID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MarkEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(2, CODE);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(3, NAME);
        }
 
        String PYTAG = entity.getPYTAG();
        if (PYTAG != null) {
            stmt.bindString(4, PYTAG);
        }
 
        String PYALL = entity.getPYALL();
        if (PYALL != null) {
            stmt.bindString(5, PYALL);
        }
 
        String ext1 = entity.getExt1();
        if (ext1 != null) {
            stmt.bindString(6, ext1);
        }
 
        String ext2 = entity.getExt2();
        if (ext2 != null) {
            stmt.bindString(7, ext2);
        }
 
        String STID = entity.getSTID();
        if (STID != null) {
            stmt.bindString(8, STID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MarkEntity readEntity(Cursor cursor, int offset) {
        MarkEntity entity = new MarkEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CODE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PYTAG
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PYALL
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ext1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ext2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // STID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MarkEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCODE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPYTAG(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPYALL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExt1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExt2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSTID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MarkEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MarkEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MarkEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
